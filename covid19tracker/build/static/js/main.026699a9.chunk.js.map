{"version":3,"sources":["utils.js","components/InfoBox.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","tests","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","InfoBox","title","isRed","isYellow","isGreen","active","total","props","Card","onClick","className","CardContent","color","Typography","Map","countries","center","zoom","casesType","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","width","start","end","duration","separator","options","legend","display","element","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","classes","makeStyles","option","fontSize","marginRight","useStyles","name","iso3","sortedData","getCountriesData","onCountryChange","event","preventDefault","countryCode","Autocomplete","id","autoHighlight","onChange","getOptionLabel","renderOption","Fragment","src","alt","height","renderInput","params","TextField","variant","inputProps","autoComplete","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.026699a9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#ff8080\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#ff0f0f\",\r\n    multiplier: 2000,\r\n  },\r\n  tests: {\r\n    hex: \"#a7f542\",\r\n    multiplier: 2200,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"0\";\r\n\r\n// Sows colored filled circles for different caae sizes\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-cases\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-tests\">\r\n            Tests: {numeral(country.tests).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\nimport \"./componentsCss/InfoBox.css\"\r\nimport {prettyPrintStat} from \"../utils\"\r\n\r\nconst InfoBox = ({title, cases, isRed, isYellow, isGreen, active, total, ...props}) => {\r\n    return (\r\n            <Card onClick={props.onClick} className={`infoBox ${active && \"InfoBox--selected\"} ${isRed && \"infoBox--red\"} ${isYellow && \"infoBox--yellow\"}`}>\r\n                <CardContent>\r\n                    <h2 className=\"infoBox_title\" color=\"textSecondary\">{title}</h2>\r\n\r\n                    <h3 className={`infoBox_cases ${isRed && \"infoBox__red\"} ${isYellow && \"infoBox__yellow\"} ${isGreen && \"infoBox__green\"}`}>\r\n                        {prettyPrintStat(cases)}\r\n                     </h3>\r\n\r\n                    <Typography className=\"infoBox_total\" color=\"textSecondary\"> Total Of : {prettyPrintStat(total)}</Typography>\r\n                </CardContent>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n\r\n","import React from 'react'\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport \"./componentsCss/Map.css\"\r\nimport { showDataOnMap } from '../utils';\r\n\r\nfunction Map({countries,center,zoom,casesType}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer \r\n                  url= \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                  attribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from \"react\";\r\nimport \"./componentsCss/Table.css\";\r\nimport CountUp from \"react-countup\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      <tr>\r\n        <td width=\"10%\" className=\"td5\">\r\n          Country\r\n        </td>\r\n        <td width=\"10%\" className=\"td6\">\r\n          Cases\r\n        </td>\r\n        <td width=\"10%\" className=\"td7\">\r\n          Recovered\r\n        </td>\r\n        <td width=\"10%\" className=\"td8\">\r\n          Deaths\r\n        </td>\r\n        <td width=\"10%\" className=\"td9\">\r\n          Tests\r\n        </td>\r\n      </tr>\r\n      {countries.map(({ country, cases, recovered, deaths, tests }) => (\r\n        <tr>\r\n          <td width=\"15%\" className=\"td\">\r\n            {country}\r\n          </td>\r\n\r\n          <td width=\"10%\" className=\"td1\">\r\n            <strong>\r\n              <CountUp start={0} end={cases} duration={6} separator=\",\" />\r\n            </strong>\r\n          </td>\r\n          <td width=\"10%\" className=\"td2\">\r\n            <strong>\r\n              <CountUp start={0} end={recovered} duration={6} separator=\",\" />\r\n            </strong>\r\n          </td>\r\n          <td width=\"10%\" className=\"td3\">\r\n            <strong>\r\n              <CountUp start={0} end={deaths} duration={6} separator=\",\" />\r\n            </strong>\r\n          </td>\r\n          <td width=\"10%\" className=\"td4\">\r\n            <strong>\r\n              <CountUp start={0} end={tests} duration={6} separator=\",\" />\r\n            </strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  element: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      fetch(\"http://disease.sh/v3/covid-19/historical/all?lastdays=100\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox\";\nimport numeral from \"numeral\";\nimport Map from \"./components/Map\";\nimport Table from \"./components/Table\";\nimport { sortData } from \"./utils\";\nimport LineGraph from \"./components/LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction App() {\n  //declaring the state\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 41.2284491,\n    lng: -80.9448295,\n  });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const useStyles = makeStyles({\n    option: {\n      fontSize: 15,\n      \"& > span\": {\n        marginRight: 10,\n        fontSize: 20,\n      },\n    },\n  });\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  /* fetching data from API,Mapping through the fetched data and picking the particular items needed from the data and setting the items to the state\n   */\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso3,\n            flag: country.countryInfo.flag,\n          }));\n          countries.push({\n            name: \"worldwide\",\n            value: \"worldwide\",\n            flag:\n              \"https://cdn2.iconfinder.com/data/icons/pittogrammi/142/39-512.png\",\n          });\n          //setting the state to the chosen data from the lot\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n    //firing the function\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event, country) => {\n    event.preventDefault();\n    if (country === null) return;\n    const countryCode = country.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if (countryCode !== \"worldwide\") {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(2);\n        } else {\n          setMapCenter({ lat: 41.2284491, lng: -80.9448295 });\n          setMapZoom(3);\n        }\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid19-Tracker</h1>\n          <Autocomplete\n            id=\"country-select\"\n            className=\"app__dropdown\"\n            style={{ width: 250 }}\n            options={countries}\n            classes={{\n              option: classes.option,\n            }}\n            autoHighlight\n            onChange={onCountryChange}\n            getOptionLabel={(option) => option.name}\n            renderOption={(option) => (\n              <React.Fragment>\n                <span>\n                  <img src={option.flag} alt=\"\" width=\"20\" height=\"20\" />\n                </span>\n                {option.name}\n              </React.Fragment>\n            )}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"select a country\"\n                variant=\"outlined\"\n                inputProps={{\n                  ...params.inputProps,\n                  autoComplete: \"new-password\", // disable autocomplete and autofill\n                }}\n              />\n            )}\n          />\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isYellow\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus cases\"\n            cases={countryInfo.todayCases}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n\n          <InfoBox\n            isGreen\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={countryInfo.todayRecovered}\n            total={countryInfo.recovered}\n          />\n\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={countryInfo.todayDeaths}\n            total={countryInfo.deaths}\n          />\n        </div>\n        <div className=\"info__tests\">\n          <InfoBox\n            isRed\n            active={casesType === \"tests\"}\n            title=\"Total Tests\"\n            cases={countryInfo.tests}\n            total={countryInfo.tests}\n          />\n        </div>\n        {/* The Map component */}\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      {/* right side of the app */}\n      <Card className=\"app__right\">\n        <CardContent>\n          <h2>Live cases</h2>\n          <Table countries={tableData} />\n          <hr />\n          <h2 className=\"app__graphTitle\">Worldwide new {casesType}</h2>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}